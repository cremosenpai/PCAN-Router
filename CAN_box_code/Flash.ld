/***********************************************************************/
/*                                                                     */
/*  Flash.ld:  Linker Script File                                      */
/***********************************************************************/

/* Stack Sizes defined here, Stackaddresses provided to other Modules by
	Linkerscript */
UND_Stack_Size = 8;
ABT_Stack_Size = 8;
FIQ_Stack_Size = 8;
IRQ_Stack_Size = 256;
SVC_Stack_Size = 8;
USR_Stack_Size = 512;


/* Entrypoint */
ENTRY(_boot)


/* Memory Definitions */
MEMORY
{
  ROM (rx) : ORIGIN = 0x00002000, LENGTH = 0x0003C000
  RAM (rw) : ORIGIN = 0x40000000, LENGTH = 0x00004000
}


/* Section Definitions */
SECTIONS
{

  /* first section is .text which is used for code */
   .text :
  {
	KEEP(*(.init))             /* Startup code from .init-section */
	*(.text .text.*)           /* remaining code */
	*(.gnu.linkonce.t.*)
	*(.glue_7)
	*(.glue_7t)
	*(.gcc_except_table)
	*(.rodata)                 /* read-only data (constants) */
	*(.rodata*)
	*(.gnu.linkonce.r.*)
  } > ROM
  
  . = ALIGN(4);
  
	/* .ctors .dtors are used for c++ constructors/destructors */
	/* added by Martin Thomas 4/2005 based on Anglia Design example */
	.ctors :
	{
		PROVIDE(__ctors_start__ = .);
		KEEP(*(SORT(.ctors.*)))
		KEEP(*(.ctors))
		PROVIDE(__ctors_end__ = .);
	} >ROM
	
	.dtors :
	{
		PROVIDE(__dtors_start__ = .); 
		KEEP(*(SORT(.dtors.*)))
		KEEP(*(.dtors))
		PROVIDE(__dtors_end__ = .);
	} >ROM
  
    . = ALIGN(4);
	/* mthomas - end */
   
  _etext = . ;
  PROVIDE (etext = .);

  /* .data section which is used for initialized data */
  .data : AT (_etext)
  {
    _data = .;
    *(.data)
	*(.data.*)
	*(.gnu.linkonce.d*)
	SORT(CONSTRUCTORS) /* mt 4/2005 */
	. = ALIGN(4);
	*(.fastrun)
  } > RAM
 
  . = ALIGN(4);
  _edata = . ;
  PROVIDE (edata = .);
  
  
  /* Section for can2flash crc_array */
	.C2F_Info 0x3DF00 :
	{
		*(.C2F_Info)
		
		SHORT ( 1);												/* Number of CRC Blocks */
		
		LONG ( 0x2000);										/* Begin of Firmware Block */
		LONG ( _etext + SIZEOF ( .data) - 0x2000);	/* Length of Firmware for CRC */
		SHORT ( 0);												/* Placeholder for CRC */
	} > ROM

	

  /* .bss section which is used for uninitialized data */
  .bss (NOLOAD) :
  {
    __bss_start = . ;
    __bss_start__ = . ;
    *(.bss)
	*(.gnu.linkonce.b*)
    *(COMMON)
    . = ALIGN(4);
  } > RAM

  . = ALIGN(4);
  __bss_end__ = . ;
  PROVIDE (__bss_end = .);

  
  .stack :
	{
		. = ALIGN(8);

		. += USR_Stack_Size;
		PROVIDE (_USRStackTop = .);

		. += SVC_Stack_Size;
		PROVIDE (_SVCStackTop = .);

		. += IRQ_Stack_Size;
		PROVIDE (_IRQStackTop = .);

		. += FIQ_Stack_Size;
		PROVIDE (_FIQStackTop = .);

		. += ABT_Stack_Size;
		PROVIDE (_ABTStackTop = .);

		. += UND_Stack_Size;
		PROVIDE (_UNDStackTop = .);    
	} > RAM


  _end = . ;
  PROVIDE (end = .);

  /* Stabs debugging sections.  */
  .stab          0 : { *(.stab) }
  .stabstr       0 : { *(.stabstr) }
  .stab.excl     0 : { *(.stab.excl) }
  .stab.exclstr  0 : { *(.stab.exclstr) }
  .stab.index    0 : { *(.stab.index) }
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment       0 : { *(.comment) }
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0 : { *(.debug_weaknames) }
  .debug_funcnames 0 : { *(.debug_funcnames) }
  .debug_typenames 0 : { *(.debug_typenames) }
  .debug_varnames  0 : { *(.debug_varnames) }
}

